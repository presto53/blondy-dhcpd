#!/usr/bin/env ruby
require 'eventmachine'
require 'blondy/dhcpd/logger'
require 'blondy/dhcpd/config'
require 'blondy/dhcpd/server'

module Blondy
  module DHCPD
    # Check if daemon already running
    if /^\// =~ CONFIG['pid_path']
      @pidf = "#{CONFIG['pid_path'].gsub(/\/*$/,'')}/blondy-dhcpd.pid"
      running_pid = File.open(@pidf, 'r').read.chomp rescue nil
      running_pgid = Process.getpgid(running_pid.to_i) rescue nil if running_pid
      if running_pgid
	Logger.error 'Daemon already running.'
	exit 1
      end
    else
      Logger.error 'PID path is wrong or not set.'
      exit 1
    end

    # Daemonize
    Process.daemon unless @options[:debug]

    # Write PID
    File.write(@pidf, "#{Process.pid}\n")
    Logger.info "Starting dhcpd with pid #{Process.pid}"

    # Signal handlers
    @signals = Array.new
    class << self
      def shutdown(exit_code)
	Logger.info "Shutdown server..."
	EM.stop if EM.reactor_running?
	File.delete(@pidf) if File.exists?(@pidf)
	exit exit_code
      end
      def term_handler
	Logger.info "Server received TERM signal."
	shutdown(0)
      end
      def int_handler
	Logger.info "Server received INT signal."
	shutdown(0)
      end
    end

    # Start server
    if Process.uid != 0
      Logger.error 'Failed to start server. Server should be started by root.'
      shutdown(1)
      exit 1
    else
      EM.run do
	Signal.trap('TERM') { @signals << :term }
	Signal.trap('INT') { @signals << :int }
	# Check for signals periodically
	EM.add_periodic_timer(1) do
	  term_handler if @signals.include?(:term)
	  int_handler if @signals.include?(:int)
	end
	EM.open_datagram_socket('0.0.0.0', 67, Server)
      end
    end
  end
end
